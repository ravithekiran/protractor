{
  "_args": [
    [
      {
        "raw": "underscore.string@git+https://github.com/epeli/underscore.string.git#master",
        "scope": null,
        "escapedName": "underscore.string",
        "name": "underscore.string",
        "rawSpec": "git+https://github.com/epeli/underscore.string.git#master",
        "spec": "git+https://github.com/epeli/underscore.string.git#master",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:epeli/underscore.string.git#master",
          "sshUrl": "git+ssh://git@github.com/epeli/underscore.string.git#master",
          "httpsUrl": "git+https://github.com/epeli/underscore.string.git#master",
          "gitUrl": "git://github.com/epeli/underscore.string.git#master",
          "shortcut": "github:epeli/underscore.string#master",
          "directUrl": "https://raw.githubusercontent.com/epeli/underscore.string/master/package.json"
        }
      },
      "E:\\protractortests\\node_modules\\objects"
    ]
  ],
  "_from": "git+https://github.com/epeli/underscore.string.git#master",
  "_id": "underscore.string@3.3.4",
  "_inCache": true,
  "_installable": true,
  "_location": "/underscore.string",
  "_phantomChildren": {},
  "_requested": {
    "raw": "underscore.string@git+https://github.com/epeli/underscore.string.git#master",
    "scope": null,
    "escapedName": "underscore.string",
    "name": "underscore.string",
    "rawSpec": "git+https://github.com/epeli/underscore.string.git#master",
    "spec": "git+https://github.com/epeli/underscore.string.git#master",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:epeli/underscore.string.git#master",
      "sshUrl": "git+ssh://git@github.com/epeli/underscore.string.git#master",
      "httpsUrl": "git+https://github.com/epeli/underscore.string.git#master",
      "gitUrl": "git://github.com/epeli/underscore.string.git#master",
      "shortcut": "github:epeli/underscore.string#master",
      "directUrl": "https://raw.githubusercontent.com/epeli/underscore.string/master/package.json"
    }
  },
  "_requiredBy": [
    "/objects"
  ],
  "_resolved": "git+https://github.com/epeli/underscore.string.git#2f78f0d6e36d553484a1bf5fe5ed1998f013dea5",
  "_shasum": "efea0f220ddaa13f213cb4701ddb217b8b2db696",
  "_shrinkwrap": null,
  "_spec": "underscore.string@git+https://github.com/epeli/underscore.string.git#master",
  "_where": "E:\\protractortests\\node_modules\\objects",
  "bugs": {
    "url": "https://github.com/epeli/underscore.string/issues"
  },
  "contributors": [
    {
      "name": "Esa-Matti Suuronen",
      "email": "esa-matti@suuronen.org",
      "url": "http://esa-matti.suuronen.org/"
    },
    {
      "name": "Edward Tsech",
      "email": "edtsech@gmail.com"
    },
    {
      "name": "Pavel Pravosud",
      "email": "pavel@pravosud.com",
      "url": "<https://github.com/rwz>"
    },
    {
      "name": "Sasha Koss",
      "email": "kossnocorp@gmail.com",
      "url": "http://koss.nocorp.me/"
    },
    {
      "name": "Vladimir Dronnikov",
      "email": "dronnikov@gmail.com"
    },
    {
      "name": "Pete Kruckenberg",
      "email": "https://github.com/kruckenb",
      "url": "<https://github.com/kruckenb>"
    },
    {
      "name": "Paul Chavard",
      "email": "paul@chavard.net",
      "url": "<http://tchak.net>"
    },
    {
      "name": "Ed Finkler",
      "email": "coj@funkatron.com",
      "url": "<http://funkatron.com>"
    },
    {
      "name": "Christoph Hermann",
      "email": "schtoeffel@gmail.com",
      "url": "<https://github.com/stoeffel>"
    }
  ],
  "dependencies": {
    "sprintf-js": "^1.0.3",
    "util-deprecate": "^1.0.2"
  },
  "description": "String manipulation extensions for Underscore.js javascript library.",
  "devDependencies": {
    "browserify": "^13.0.0",
    "browserify-header": "^0.9.2",
    "eslint": "^1.10.3",
    "istanbul": "^0.4.2",
    "mocha": "^2.1.0",
    "mocha-lcov-reporter": "^1.0.0",
    "replace": "^0.3.0",
    "uglifyjs": "^2.4.10",
    "underscore": "^1.7.0"
  },
  "directories": {
    "lib": "./"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "2f78f0d6e36d553484a1bf5fe5ed1998f013dea5",
  "homepage": "http://epeli.github.com/underscore.string/",
  "jshintConfig": {
    "node": true,
    "browser": true,
    "qunit": true,
    "globals": {
      "s": true
    }
  },
  "keywords": [
    "underscore",
    "string"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "underscore.string",
  "optionalDependencies": {},
  "readme": "<span class=\"github-only\">\r\n\r\nThe stable release documentation can be found here https://epeli.github.io/underscore.string/\r\n\r\n</span>\r\n\r\n# Underscore.string [![Build Status](https://secure.travis-ci.org/epeli/underscore.string.png?branch=master)](http://travis-ci.org/epeli/underscore.string) #\r\n\r\nJavascript lacks complete string manipulation operations.\r\nThis is an attempt to fill that gap. List of build-in methods can be found\r\nfor example from [Dive Into JavaScript][d].\r\nOriginally started as an Underscore.js extension but is a full standalone\r\nlibrary nowadays.\r\n\r\nUpgrading from 2.x to 3.x? Please read the [changelog][c].\r\n\r\n[c]: https://github.com/epeli/underscore.string/blob/master/CHANGELOG.markdown#300\r\n\r\n## Usage\r\n\r\n### For Node.js, Browserify and Webpack\r\n\r\nInstall from npm\r\n\r\n    npm install underscore.string\r\n\r\nRequire individual functions\r\n\r\n```javascript\r\nvar slugify = require(\"underscore.string/slugify\");\r\n\r\nslugify(\"Hello world!\");\r\n// => hello-world\r\n```\r\n\r\nor load the full library to enable chaining\r\n\r\n```javascript\r\nvar s = require(\"underscore.string\");\r\n\r\ns(\"   epeli  \").trim().capitalize().value();\r\n// => \"Epeli\"\r\n```\r\n\r\nbut especially when using with [Browserify][] the individual function approach\r\nis recommended because using it you only add those functions to your bundle you\r\nuse.\r\n\r\n[Browserify]: http://browserify.org/\r\n\r\n### In Meteor\r\n\r\nFrom your [Meteor][] project folder\r\n\r\n```shell\r\n    meteor add underscorestring:underscore.string\r\n```\r\n\r\nand you'll be able to access the library with the ***s*** global from both the server and the client.\r\n\r\n```javascript\r\ns.slugify(\"Hello world!\");\r\n// => hello-world\r\n\r\ns(\"   epeli  \").trim().capitalize().value();\r\n// => \"Epeli\"\r\n```\r\n\r\n[Meteor]: http://www.meteor.com/\r\n\r\n### Others\r\n\r\nThe `dist/underscore.string.js` file is an [UMD][] build. You can load it using\r\nan AMD loader such as [RequireJS][] or just stick it to a web page and access\r\nthe library from the ***s*** global.\r\n\r\n[UMD]: https://github.com/umdjs/umd\r\n[RequireJS]: http://requirejs.org/\r\n\r\n### Underscore.js/Lo-Dash integration\r\n\r\nIt is still possible use as Underscore.js/Lo-Dash extension\r\n\r\n```javascript\r\n_.mixin(s.exports());\r\n```\r\nBut it's not recommended since `include`, `contains`, `reverse` and `join`\r\nare dropped because they collide with the functions already defined by Underscore.js.\r\n\r\n### Lo-Dash-FP/Ramda integration\r\n\r\nIf you want to use underscore.string with [ramdajs](http://ramdajs.com/) or [Lo-Dash-FP](https://github.com/lodash/lodash-fp) you can use [underscore.string.fp](https://github.com/stoeffel/underscore.string.fp).\r\n\r\n    npm install underscore.string.fp\r\n\r\n```javascript\r\nvar S = require('underscore.string.fp');\r\nvar filter = require('lodash-fp').filter;\r\nvar filter = require('ramda').filter;\r\n\r\nfilter(S.startsWith('.'), [\r\n  '.vimrc',\r\n  'foo.md',\r\n  '.zshrc'\r\n]);\r\n// => ['.vimrc', '.zshrc']\r\n```\r\n\r\n## Download\r\n  \r\n  * [Development version](https://npmcdn.com/underscore.string/dist/underscore.string.js) *Uncompressed with Comments*\r\n  * [Production version](https://npmcdn.com/underscore.string/dist/underscore.string.min.js) *Minified*\r\n\r\n## API\r\n\r\n### Individual functions\r\n\r\n#### numberFormat(number, [ decimals=0, decimalSeparator='.', orderSeparator=',']) => string\r\n\r\nFormats the numbers.\r\n\r\n```javascript\r\nnumberFormat(1000, 2);\r\n// => \"1,000.00\"\r\n\r\nnumberFormat(123456789.123, 5, \".\", \",\");\r\n// => \"123,456,789.12300\"\r\n```\r\n\r\n\r\n#### levenshtein(string1, string2) => number\r\n\r\nCalculates [Levenshtein distance][ld] between two strings.\r\n[ld]: http://en.wikipedia.org/wiki/Levenshtein_distance\r\n\r\n```javascript\r\nlevenshtein(\"kitten\", \"kittah\");\r\n// => 2\r\n```\r\n\r\n#### capitalize(string, [lowercaseRest=false]) => string\r\n\r\nConverts first letter of the string to uppercase. If `true` is passed as second argument the rest\r\nof the string will be converted to lower case.\r\n\r\n```javascript\r\ncapitalize(\"foo Bar\");\r\n// => \"Foo Bar\"\r\n\r\ncapitalize(\"FOO Bar\", true);\r\n// => \"Foo bar\"\r\n```\r\n\r\n#### decapitalize(string) => string\r\n\r\nConverts first letter of the string to lowercase.\r\n\r\n```javascript\r\ndecapitalize(\"Foo Bar\");\r\n// => \"foo Bar\"\r\n```\r\n\r\n#### chop(string, step) => array\r\n\r\n```javascript\r\nchop(\"whitespace\", 3);\r\n// => [\"whi\", \"tes\", \"pac\", \"e\"]\r\n```\r\n\r\n#### clean(string) => string\r\n\r\nTrim and replace multiple spaces with a single space.\r\n\r\n```javascript\r\nclean(\" foo    bar   \");\r\n// => \"foo bar\"\r\n```\r\n\r\n#### cleanDiacritics(string) => string\r\n\r\nReplace [diacritic][dc] characters with closest ASCII equivalents. Check the\r\n[source][s] for supported characters. [Pull requests][p] welcome for missing\r\ncharacters!\r\n\r\n[dc]: https://en.wikipedia.org/wiki/Diacritic\r\n[s]: https://github.com/epeli/underscore.string/blob/master/cleanDiacritics.js\r\n[p]: https://github.com/epeli/underscore.string/blob/master/CONTRIBUTING.markdown\r\n\r\n```javascript\r\ncleanDiacritics(\"ääkkönen\");\r\n// => \"aakkonen\"\r\n```\r\n\r\n#### chars(string) => array\r\n\r\n```javascript\r\nchars(\"Hello\");\r\n// => [\"H\", \"e\", \"l\", \"l\", \"o\"]\r\n```\r\n\r\n#### swapCase(string) => string\r\n\r\nReturns a copy of the string in which all the case-based characters have had their case swapped.\r\n\r\n```javascript\r\nswapCase(\"hELLO\");\r\n// => \"Hello\"\r\n```\r\n\r\n#### include(string, substring) => boolean\r\n\r\nTests if string contains a substring.\r\n\r\n```javascript\r\ninclude(\"foobar\", \"ob\");\r\n// => true\r\n```\r\n\r\n#### count(string, substring) => number\r\n\r\nReturns number of occurrences of substring in string.\r\n\r\n```javascript\r\ncount(\"Hello world\", \"l\");\r\n// => 3\r\n```\r\n\r\n#### escapeHTML(string) => string\r\n\r\nConverts HTML special characters to their entity equivalents.\r\nThis function supports cent, yen, euro, pound, lt, gt, copy, reg, quote, amp, apos.\r\n\r\n```javascript\r\nescapeHTML(\"<div>Blah blah blah</div>\");\r\n// => \"&lt;div&gt;Blah blah blah&lt;/div&gt;\"\r\n```\r\n\r\n#### unescapeHTML(string) => string\r\n\r\nConverts entity characters to HTML equivalents.\r\nThis function supports cent, yen, euro, pound, lt, gt, copy, reg, quote, amp, apos, nbsp.\r\n\r\n```javascript\r\nunescapeHTML(\"&lt;div&gt;Blah&nbsp;blah blah&lt;/div&gt;\");\r\n// => \"<div>Blah blah blah</div>\"\r\n```\r\n\r\n#### insert(string, index, substring) => string\r\n\r\n```javascript\r\ninsert(\"Hellworld\", 4, \"o \");\r\n// => \"Hello world\"\r\n```\r\n\r\n#### replaceAll(string, find, replace, [ignorecase=false]) => string\r\n\r\n```javascript\r\nreplaceAll(\"foo\", \"o\", \"a\");\r\n// => \"faa\"\r\n```\r\n\r\n#### isBlank(string) => boolean\r\n\r\n```javascript\r\nisBlank(\"\"); // => true\r\nisBlank(\"\\n\"); // => true\r\nisBlank(\" \"); // => true\r\nisBlank(\"a\"); // => false\r\n```\r\n\r\n#### join(separator, ...strings) => string\r\n\r\nJoins strings together with given separator\r\n\r\n```javascript\r\njoin(\" \", \"foo\", \"bar\");\r\n// => \"foo bar\"\r\n```\r\n\r\n#### lines(str) => array\r\n\r\nSplit lines to an array\r\n\r\n```javascript\r\nlines(\"Hello\\nWorld\");\r\n// => [\"Hello\", \"World\"]\r\n```\r\n\r\n#### wrap(str, options) => string\r\n\r\nSplits a line `str` (default '') into several lines of size `options.width` (default 75) using a `options.seperator` (default '\\n'). If `options.trailingSpaces` is true, make each line at least `width` long using trailing spaces. If `options.cut` is true, create new lines in the middle of words. If `options.preserveSpaces` is true, preserve the space that should be there at the end of a line (only works if options.cut is false).\r\n\r\n```javascript\r\nwrap(\"Hello World\", { width:5 })\r\n// => \"Hello\\nWorld\"\r\n\r\nwrap(\"Hello World\", { width:6, seperator:'.', trailingSpaces: true })\r\n// => \"Hello .World \"\r\n\r\nwrap(\"Hello World\", { width:5, seperator:'.', cut:true, trailingSpaces: true })\r\n// => \"Hello. Worl.d    \"\r\n\r\nwrap(\"Hello World\", { width:5, seperator:'.', preserveSpaces: true })\r\n// => \"Hello .World\"\r\n\r\n```\r\n\r\n#### dedent(str, [pattern]) => string\r\n\r\nDedent unnecessary indentation or dedent by a pattern.\r\n\r\nCredits go to @sindresorhus.\r\nThis implementation is similar to https://github.com/sindresorhus/strip-indent\r\n\r\n```javascript\r\ndedent(\"  Hello\\n    World\");\r\n// => \"Hello\\n  World\"\r\n\r\ndedent(\"\\t\\tHello\\n\\t\\t\\t\\tWorld\");\r\n// => \"Hello\\n\\t\\tWorld\"\r\n\r\ndedent(\"    Hello\\n    World\", \"  \"); // Dedent by 2 spaces\r\n// => \"  Hello\\n  World\"\r\n```\r\n\r\n#### reverse(string) => string\r\n\r\nReturn reversed string:\r\n\r\n```javascript\r\nreverse(\"foobar\");\r\n// => \"raboof\"\r\n```\r\n\r\n#### splice(string, index, howmany, substring) => string\r\n\r\nLike an array splice.\r\n\r\n```javascript\r\nsplice(\"https://edtsech@bitbucket.org/edtsech/underscore.strings\", 30, 7, \"epeli\");\r\n// => \"https://edtsech@bitbucket.org/epeli/underscore.strings\"\r\n```\r\n\r\n#### startsWith(string, starts, [position]) => boolean\r\n\r\nThis method checks whether the string begins with `starts` at `position` (default: 0).\r\n\r\n```javascript\r\nstartsWith(\"image.gif\", \"image\");\r\n// => true\r\n\r\nstartsWith(\".vimrc\", \"vim\", 1);\r\n// => true\r\n```\r\n\r\n#### endsWith(string, ends, [position]) => boolean\r\n\r\nThis method checks whether the string ends with `ends` at `position` (default: string.length).\r\n\r\n```javascript\r\nendsWith(\"image.gif\", \"gif\");\r\n// => true\r\n\r\nendsWith(\"image.old.gif\", \"old\", 9);\r\n// => true\r\n```\r\n\r\n#### pred(string) => string\r\n\r\nReturns the predecessor to str.\r\n\r\n```javascript\r\npred(\"b\");\r\n// => \"a\"\r\n\r\npred(\"B\");\r\n// => \"A\"\r\n```\r\n\r\n#### succ(string) => string\r\n\r\nReturns the successor to str.\r\n\r\n```javascript\r\nsucc(\"a\");\r\n// => \"b\"\r\n\r\nsucc(\"A\");\r\n// => \"B\"\r\n```\r\n\r\n\r\n#### titleize(string) => string\r\n\r\n```javascript\r\ntitleize(\"my name is epeli\");\r\n// => \"My Name Is Epeli\"\r\n```\r\n\r\n#### camelize(string, [decapitalize=false]) => string\r\n\r\nConverts underscored or dasherized string to a camelized one. Begins with\r\na lower case letter unless it starts with an underscore, dash or an upper case letter.\r\n\r\n```javascript\r\ncamelize(\"moz-transform\");\r\n// => \"mozTransform\"\r\n\r\ncamelize(\"-moz-transform\");\r\n// => \"MozTransform\"\r\n\r\ncamelize(\"_moz_transform\");\r\n// => \"MozTransform\"\r\n\r\ncamelize(\"Moz-transform\");\r\n// => \"MozTransform\"\r\n\r\ncamelize(\"-moz-transform\", true);\r\n// => \"mozTransform\"\r\n```\r\n\r\n#### classify(string) => string\r\n\r\nConverts string to camelized class name. First letter is always upper case\r\n\r\n```javascript\r\nclassify(\"some_class_name\");\r\n// => \"SomeClassName\"\r\n```\r\n\r\n#### underscored(string) => string\r\n\r\nConverts a camelized or dasherized string into an underscored one\r\n\r\n```javascript\r\nunderscored(\"MozTransform\");\r\n// => \"moz_transform\"\r\n```\r\n\r\n#### dasherize(string) => string\r\n\r\nConverts a underscored or camelized string into an dasherized one\r\n\r\n```javascript\r\ndasherize(\"MozTransform\");\r\n// => \"-moz-transform\"\r\n```\r\n\r\n#### humanize(string) => string\r\n\r\nConverts an underscored, camelized, or dasherized string into a humanized one.\r\nAlso removes beginning and ending whitespace, and removes the postfix '_id'.\r\n\r\n```javascript\r\nhumanize(\"  capitalize dash-CamelCase_underscore trim  \");\r\n// => \"Capitalize dash camel case underscore trim\"\r\n```\r\n\r\n#### trim(string, [characters]) => string\r\n\r\nTrims defined characters from begining and ending of the string.\r\nDefaults to whitespace characters.\r\n\r\n```javascript\r\ntrim(\"  foobar   \");\r\n// => \"foobar\"\r\n\r\ntrim(\"_-foobar-_\", \"_-\");\r\n// => \"foobar\"\r\n```\r\n\r\n\r\n#### ltrim(string, [characters]) => string\r\n\r\nLeft trim. Similar to trim, but only for left side.\r\n\r\n#### rtrim(string, [characters]) => string\r\n\r\nRight trim. Similar to trim, but only for right side.\r\n\r\n#### truncate(string, length, [truncateString = '...']) => string\r\n\r\n```javascript\r\ntruncate(\"Hello world\", 5);\r\n// => \"Hello...\"\r\n\r\ntruncate(\"Hello\", 10);\r\n// => \"Hello\"\r\n```\r\n\r\n#### prune(string, length, pruneString) => string\r\n\r\nElegant version of truncate.  Makes sure the pruned string does not exceed the\r\noriginal length.  Avoid half-chopped words when truncating.\r\n\r\n```javascript\r\nprune(\"Hello, world\", 5);\r\n// => \"Hello...\"\r\n\r\nprune(\"Hello, world\", 8);\r\n// => \"Hello...\"\r\n\r\nprune(\"Hello, world\", 5, \" (read a lot more)\");\r\n// => \"Hello, world\" (as adding \"(read a lot more)\" would be longer than the original string)\r\n\r\nprune(\"Hello, cruel world\", 15);\r\n// => \"Hello, cruel...\"\r\n\r\nprune(\"Hello\", 10);\r\n// => \"Hello\"\r\n```\r\n\r\n#### words(str, delimiter=/\\s+/) => array\r\n\r\nSplit string by delimiter (String or RegExp), /\\s+/ by default.\r\n\r\n```javascript\r\nwords(\"   I   love   you   \");\r\n// => [\"I\", \"love\", \"you\"]\r\n\r\nwords(\"I_love_you\", \"_\");\r\n// => [\"I\", \"love\", \"you\"]\r\n\r\nwords(\"I-love-you\", /-/);\r\n// => [\"I\", \"love\", \"you\"]\r\n\r\nwords(\"   \")\r\n// => []\r\n```\r\n\r\n#### sprintf(string format, ...arguments) => string\r\n\r\nC like string formatting. Makes use of the [sprintf-js](https://npmjs.org/package/sprintf-js) package.\r\n\r\n**This function will be removed in the next major release, use the [sprintf-js](https://npmjs.org/package/sprintf-js) package instead.**\r\n\r\n```javascript\r\nsprintf(\"%.1f\", 1.17);\r\n// => \"1.2\"\r\n```\r\n\r\n#### pad(str, length, [padStr, type]) => string\r\n\r\npads the `str` with characters until the total string length is equal to the passed `length` parameter. By default, pads on the **left** with the space char (`\" \"`). `padStr` is truncated to a single character if necessary.\r\n\r\n```javascript\r\npad(\"1\", 8);\r\n// => \"       1\"\r\n\r\npad(\"1\", 8, \"0\");\r\n// => \"00000001\"\r\n\r\npad(\"1\", 8, \"0\", \"right\");\r\n// => \"10000000\"\r\n\r\npad(\"1\", 8, \"0\", \"both\");\r\n// => \"00001000\"\r\n\r\npad(\"1\", 8, \"bleepblorp\", \"both\");\r\n// => \"bbbb1bbb\"\r\n```\r\n\r\n#### lpad(str, length, [padStr]) => string\r\n\r\nleft-pad a string. Alias for `pad(str, length, padStr, \"left\")`\r\n\r\n```javascript\r\nlpad(\"1\", 8, \"0\");\r\n// => \"00000001\"\r\n```\r\n\r\n#### rpad(str, length, [padStr]) => string\r\n\r\nright-pad a string. Alias for `pad(str, length, padStr, \"right\")`\r\n\r\n```javascript\r\nrpad(\"1\", 8, \"0\");\r\n// => \"10000000\"\r\n```\r\n\r\n#### lrpad(str, length, [padStr]) => string\r\n\r\nleft/right-pad a string. Alias for `pad(str, length, padStr, \"both\")`\r\n\r\n```javascript\r\nlrpad(\"1\", 8, '0');\r\n// => \"00001000\"\r\n```\r\n\r\n\r\n#### toNumber(string, [decimals]) => number\r\n\r\nParse string to number. Returns NaN if string can't be parsed to number.\r\n\r\n```javascript\r\ntoNumber(\"2.556\");\r\n// => 3\r\n\r\ntoNumber(\"2.556\", 1);\r\n// => 2.6\r\n\r\ntoNumber(\"999.999\", -1);\r\n// => 990\r\n```\r\n\r\n#### strRight(string, pattern) => string\r\n\r\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\r\n\r\n```javascript\r\nstrRight(\"This_is_a_test_string\", \"_\");\r\n// => \"is_a_test_string\"\r\n```\r\n\r\n#### strRightBack(string, pattern) => string\r\n\r\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the right of the pattern or all string if no match found.\r\n\r\n```javascript\r\nstrRightBack(\"This_is_a_test_string\", \"_\");\r\n// => \"string\"\r\n```\r\n\r\n#### strLeft(string, pattern) => string\r\n\r\nSearches a string from left to right for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\r\n\r\n```javascript\r\nstrLeft(\"This_is_a_test_string\", \"_\");\r\n// => \"This\";\r\n```\r\n\r\n#### strLeftBack(string, pattern) => string\r\n\r\nSearches a string from right to left for a pattern and returns a substring consisting of the characters in the string that are to the left of the pattern or all string if no match found.\r\n\r\n```javascript\r\nstrLeftBack(\"This_is_a_test_string\", \"_\");\r\n// => \"This_is_a_test\";\r\n```\r\n\r\n#### stripTags(string) => string\r\n\r\nRemoves all html tags from string.\r\n\r\n```javascript\r\nstripTags(\"a <a href=\\\"#\\\">link</a>\");\r\n// => \"a link\"\r\n\r\nstripTags(\"a <a href=\\\"#\\\">link</a><script>alert(\\\"hello world!\\\")</script>\");\r\n// => \"a linkalert(\"hello world!\")\"\r\n```\r\n\r\n#### toSentence(array, [delimiter, lastDelimiter]) => string\r\n\r\nJoin an array into a human readable sentence.\r\n\r\n```javascript\r\ntoSentence([\"jQuery\", \"Mootools\", \"Prototype\"]);\r\n// => \"jQuery, Mootools and Prototype\";\r\n\r\ntoSentence([\"jQuery\", \"Mootools\", \"Prototype\"], \", \", \" unt \");\r\n// => \"jQuery, Mootools unt Prototype\";\r\n```\r\n\r\n#### toSentenceSerial(array, [delimiter, lastDelimiter]) => string\r\n\r\nThe same as `toSentence`, but adjusts delimeters to use [Serial comma](http://en.wikipedia.org/wiki/Serial_comma).\r\n\r\n```javascript\r\ntoSentenceSerial([\"jQuery\", \"Mootools\"]);\r\n// => \"jQuery and Mootools\"\r\n\r\ntoSentenceSerial([\"jQuery\", \"Mootools\", \"Prototype\"]);\r\n// => \"jQuery, Mootools, and Prototype\"\r\n\r\ntoSentenceSerial([\"jQuery\", \"Mootools\", \"Prototype\"], \", \", \" unt \");\r\n// => \"jQuery, Mootools, unt Prototype\"\r\n```\r\n\r\n#### repeat(string, count, [separator]) => string\r\n\r\nRepeats a string count times.\r\n\r\n```javascript\r\nrepeat(\"foo\", 3);\r\n// => \"foofoofoo\"\r\n\r\nrepeat(\"foo\", 3, \"bar\");\r\n// => \"foobarfoobarfoo\"\r\n```\r\n\r\n#### surround(string, wrap) => string\r\n\r\nSurround a string with another string.\r\n\r\n```javascript\r\nsurround(\"foo\", \"ab\");\r\n// => \"abfooab\"\r\n```\r\n\r\n#### quote(string, quoteChar) or q(string, quoteChar) => string\r\n\r\nQuotes a string. `quoteChar` defaults to `\"`.\r\n\r\n```javascript\r\nquote(\"foo\", '\"');\r\n// => '\"foo\"';\r\n```\r\n#### unquote(string, quoteChar) => string\r\n\r\nUnquotes a string. `quoteChar` defaults to `\"`.\r\n\r\n```javascript\r\nunquote('\"foo\"');\r\n// => \"foo\"\r\n\r\nunquote(\"'foo'\", \"'\");\r\n// => \"foo\"\r\n```\r\n\r\n\r\n#### slugify(string) => string\r\n\r\nTransform text into an ascii slug which can be used in safely in URLs. Replaces whitespaces, accentuated, and special characters with a dash. Limited set of non-ascii characters are transformed to similar versions in the ascii character set such as `ä` to `a`.\r\n\r\n```javascript\r\nslugify(\"Un éléphant à l\\'orée du bois\");\r\n// => \"un-elephant-a-l-oree-du-bois\"\r\n```\r\n\r\n***Caution: this function is charset dependent***\r\n\r\n#### naturalCmp(string1, string2) => number\r\n\r\nNaturally sort strings like humans would do. None numbers are compared by their [ASCII values](http://www.asciitable.com/). Note: this means \"a\" > \"A\". Use `.toLowerCase` if this isn't to be desired.\r\n\r\nJust past it to `Array#sort`.\r\n\r\n```javascript\r\n[\"foo20\", \"foo5\"].sort(naturalCmp);\r\n// => [\"foo5\", \"foo20\"]\r\n```\r\n\r\n#### toBoolean(string) => boolean\r\n\r\nTurn strings that can be commonly considered as booleas to real booleans. Such as \"true\", \"false\", \"1\" and \"0\". This function is case insensitive.\r\n\r\n```javascript\r\ntoBoolean(\"true\");\r\n// => true\r\n\r\ntoBoolean(\"FALSE\");\r\n// => false\r\n\r\ntoBoolean(\"random\");\r\n// => undefined\r\n```\r\n\r\nIt can be customized by giving arrays of truth and falsy value matcher as parameters. Matchers can be also RegExp objects.\r\n\r\n```javascript\r\ntoBoolean(\"truthy\", [\"truthy\"], [\"falsy\"]);\r\n// => true\r\n\r\ntoBoolean(\"true only at start\", [/^true/]);\r\n// => true\r\n```\r\n\r\n#### map(string, function) => string\r\n\r\nCreates a new string with the results of calling a provided function on every character of the given string.\r\n\r\n```javascript\r\nmap(\"Hello world\", function(x) {\r\n  return x;\r\n});\r\n// => \"Hello world\"\r\n\r\nmap(12345, function(x) {\r\n  return x;\r\n});\r\n// => \"12345\"\r\n\r\nmap(\"Hello world\", function(x) {\r\n  if (x === 'o') x = 'O';\r\n  return x;\r\n});\r\n// => \"HellO wOrld\"\r\n```\r\n\r\n### Library functions\r\n\r\nIf you require the full library you can use chaining and aliases\r\n\r\n#### s(string) => chain\r\n\r\nStart a chain. Returns an immutable chain object with the string functions as\r\nmethods which return a new chain object instead of the plain string value.\r\n\r\nThe chain object includes also following native Javascript string methods:\r\n\r\n  - [toUpperCase](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\r\n  - [toLowerCase](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\r\n  - [split](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\r\n  - [replace](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\r\n  - [slice](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice)\r\n  - [substring](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/substring)\r\n  - [substr](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\r\n  - [concat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\r\n\r\n#### chain.value()\r\n\r\nReturn the string value from the chain\r\n\r\n```javascript\r\ns(\"  foo  \").trim().capitalize().value();\r\n// => \"Foo\"\r\n```\r\n\r\nWhen calling a method which does not return a string the resulting value is\r\nimmediately returned\r\n\r\n```javascript\r\ns(\" foobar \").trim().startsWith(\"foo\");\r\n// => true\r\n```\r\n\r\n#### chain.tap(function) => chain\r\n\r\nTap into the chain with a custom function\r\n\r\n```javascript\r\ns(\"foo\").tap(function(value){\r\n  return value + \"bar\";\r\n}).value();\r\n// => \"foobar\"\r\n```\r\n\r\n\r\n#### Aliases\r\n\r\n```javascript\r\nstrip     = trim\r\nlstrip    = ltrim\r\nrstrip    = rtrim\r\ncenter    = lrpad\r\nrjust     = lpad\r\nljust     = rpad\r\ncontains  = include\r\nq         = quote\r\ntoBool    = toBoolean\r\ncamelcase = camelize\r\n```\r\n\r\n## Maintainers ##\r\n\r\nThis library is maintained by\r\n\r\n  - Esa-Matti Suuronen – ***[@epeli](https://github.com/epeli)***\r\n  - Christoph Hermann – ***[@stoeffel](https://github.com/stoeffel)***\r\n\r\n## Licence ##\r\n\r\nThe MIT License\r\n\r\nCopyright (c) 2011 Esa-Matti Suuronen esa-matti@suuronen.org\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n\r\n[d]: http://www.diveintojavascript.com/core-javascript-reference/the-string-object\r\n",
  "readmeFilename": "README.markdown",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/epeli/underscore.string.git"
  },
  "scripts": {
    "build": "npm run build:clean && npm run build:bundle && npm run build:min",
    "build:bundle": "mkdir dist && browserify index.js -o dist/underscore.string.js -p browserify-header -s s",
    "build:clean": "rm -rf dist",
    "build:min": "uglifyjs dist/underscore.string.js -o dist/underscore.string.min.js --comments",
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha  -- --report=lcov --ui=qunit tests",
    "release": "npm test && npm run release:version && npm run build && npm run release:push",
    "release:push": "node scripts/push-tags.js",
    "release:version": "node scripts/bump-version.js",
    "test": "npm run test:lint && npm run test:unit && npm run coverage",
    "test:lint": "eslint -c .eslintrc .",
    "test:unit": "mocha --ui=qunit tests"
  },
  "version": "3.3.4"
}
